"capital_loss",
"hours_per_week",
"native_country",
"income")
data[data == " ?"] = NA
data <- data[complete.cases(data), ]
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
control = rfeControl(functions=nbFuncs, method="cv", number=10)
results = rfe(data[,1:14], data[,15], sizes=c(1:14), rfeControl=control)
print(results)
predictors(results)
svm.model<-svm(income~ education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
svm.model<-svm(income~ education_num + marital_status + relationship + capital_gain +
capital_loss,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
svm.model<-svm(income~ age + hours_per_week + education_num + capital_gain + sex + race + education + occupation
+ capital_loss, + workclass,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model<-svm(income~ age + hours_per_week + education_num + capital_gain + sex + race + education + occupation
+ capital_loss + workclass,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
head(data)
data$race = revalue(data$race, c(" Amer-Indian-Eskimo"=" Black",
" Asian-Pac-Islander"=" Black",
" Other"=" Black"))
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
data$hours_per_week[data$hours_per_week <= 40] <- "<=40"
data$hours_per_week[data$hours_per_week > 40] <- ">40"
data$hours_per_week =as.factor(data$hours_per_week)
data$education_num[data$education_num <= 10] <- "<=10"
data$education_num[data$education_num > 10] <- ">10"
data$education_num =as.factor(data$education_num)
data$age[data$age <= 30] <- "<=30"
data$age[data$age > 30] <- ">30"
data$age =as.factor(data$age)
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
head(data)
svm.model<-svm(income~ marital_status + age + education_num + capital_gain + sex + race + education + occupation
+ hours_per_week + capital_loss,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
svm.model<-svm(income~ age + education_num + marital_status + relationship +
capital_gain + hours_per_week,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
data <-read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
, sep= ",", header=F)
names(data) <- c("age",
"workclass",
"fnlwgt",
"education",
"education_num",
"marital_status",
"occupation",
"relationship",
"race",
"sex",
"capital_gain",
"capital_loss",
"hours_per_week",
"native_country",
"income")
data[data == " ?"] = NA
data <- data[complete.cases(data), ]
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred = predict(svm.model, testset[,-ncol(data)])
Accuracy(svm.pred,testset$income)
svm.model2<-svm(income~ education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred2 = predict(svm.model2, testset[,-ncol(data)])
Accuracy(svm.pred2,testset$income)
svm.model3<-svm(income~ age + hours_per_week + education_num + capital_gain + sex + race + education + occupation
+ capital_loss + workclass,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred3 = predict(svm.model3, testset[,-ncol(data)])
Accuracy(svm.pred3,testset$income)
summary(svm.model)
svm.model4<-svm(income~ education_num + marital_status + relationship + capital_gain +
capital_loss,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.pred4 = predict(svm.model4, testset[,-ncol(data)])
Accuracy(svm.pred4,testset$income)
print(table(svm.pred, true = testset[,ncol(data)]))
summary(svm.model)
print(table(svm.pred, true = testset[,ncol(data)]))
Accuracy(svm.pred,testset$income)
summary(svm.model2)
print(table(svm.pred2, true = testset[,ncol(data)]))
Accuracy(svm.pred2,testset$income)
summary(svm.model3)
print(table(svm.pred3, true = testset[,ncol(data)]))
Accuracy(svm.pred3,testset$income)
summary(svm.model4)
print(table(svm.pred4, true = testset[,ncol(data)]))
Accuracy(svm.pred4,testset$income)
svm.model5<-svm(income~ .,kernel="sigmoid", data=trainset,cost=1,gamma=0.25)
summary(svm.model5)
print(table(svm.pred5, true = testset[,ncol(data)]))
Accuracy(svm.pred5,testset$income)
svm.pred5 = predict(svm.model5, testset[,-ncol(data)])
summary(svm.model5)
print(table(svm.pred5, true = testset[,ncol(data)]))
Accuracy(svm.pred5,testset$income)
svm.model5<-svm(income~ .,kernel="polynomial", data=trainset,cost=1,gamma=0.25)
svm.pred5 = predict(svm.model5, testset[,-ncol(data)])
Accuracy(svm.pred5,testset$income)
summary(svm.model5)
print(table(svm.pred5, true = testset[,ncol(data)]))
Accuracy(svm.pred5,testset$income)
Precision(svm.pred,testset$income)
Recall(svm.pred,testset$income)
?MLmetrics
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = sum(prediction == data$Class)/length(data$Class)
precision = xtab[1,1]/sum(xtab[,1])
recall = xtab[1,1]/sum(xtab[1,])
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
evaluation(svm.pred, testset, "class")
evaluation(svm.model, testset, "class")
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = sum(prediction == testset[,ncol(data)])/length(testset[,ncol(data)])
precision = xtab[1,1]/sum(xtab[,1])
recall = xtab[1,1]/sum(xtab[1,])
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
evaluation(svm.model, testset, "class")
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = Accuracy(prediction,testset$income)
precision = xtab[1,1]/sum(xtab[,1])
recall = xtab[1,1]/sum(xtab[1,])
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
evaluation(svm.model, testset, "class")
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = Accuracy(prediction,testset$income)
precision = Precision(prediction,testset$income)
recall = Recall(prediction,testset$income)
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
evaluation(svm.model, testset, "class")
evaluation(svm.model2, testset, "class")
evaluation(svm.model3, testset, "class")
evaluation(svm.model4, testset, "class")
evaluation(svm.model5, testset, "class")
dim(data)
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
data$race = revalue(data$race, c(" Amer-Indian-Eskimo"=" Black",
" Asian-Pac-Islander"=" Black",
" Other"=" Black"))
data$age[data$age <= 30] <- "<=30"
data$age[data$age > 30] <- ">30"
data$age =as.factor(data$age)
data$hours_per_week[data$hours_per_week <= 40] <- "<=40"
data$hours_per_week[data$hours_per_week > 40] <- ">40"
data$hours_per_week =as.factor(data$hours_per_week)
data$education_num[data$education_num <= 10] <- "<=10"
data$education_num[data$education_num > 10] <- ">10"
data$education_num =as.factor(data$education_num)
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model2<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model3<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain
+ occupation + race ++ capital_loss + education,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model4<-svm(income~ age + education_num + marital_status + relationship + capital_gain +
hours_per_week,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model)
evaluation(svm.model, testset, "class")
summary(svm.model2)
evaluation(svm.model2, testset, "class")
summary(svm.model3)
evaluation(svm.model3, testset, "class")
summary(svm.model4)
evaluation(svm.model4, testset, "class")
head(data)
str(data)
summary(data)
data <-read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
, sep= ",", header=F)
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
names(data) <- c("age",
"workclass",
"fnlwgt",
"education",
"education_num",
"marital_status",
"occupation",
"relationship",
"race",
"sex",
"capital_gain",
"capital_loss",
"hours_per_week",
"native_country",
"income")
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
data$race = revalue(data$race, c(" Amer-Indian-Eskimo"=" Other",
" Asian-Pac-Islander"=" Other",
" Black"=" Other"))
head(data)
data$age[data$age <= 30] <- "<=30"
data$age[data$age > 30] <- ">30"
data$age =as.factor(data$age)
data$hours_per_week[data$hours_per_week <= 40] <- "<=40"
data$hours_per_week[data$hours_per_week > 40] <- ">40"
data$hours_per_week =as.factor(data$hours_per_week)
data$education_num[data$education_num <= 10] <- "<=10"
data$education_num[data$education_num > 10] <- ">10"
data$education_num =as.factor(data$education_num)
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
evaluation(svm.model, testset, "class")
svm.model2<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model3<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain
+ occupation + race ++ capital_loss + education,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model4<-svm(income~ age + education_num + marital_status + relationship + capital_gain +
hours_per_week,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model2)
evaluation(svm.model2, testset, "class")
summary(svm.model3)
evaluation(svm.model3, testset, "class")
summary(svm.model4)
evaluation(svm.model4, testset, "class")
head(data)
data <-read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
, sep= ",", header=F)
names(data) <- c("age",
"workclass",
"fnlwgt",
"education",
"education_num",
"marital_status",
"occupation",
"relationship",
"race",
"sex",
"capital_gain",
"capital_loss",
"hours_per_week",
"native_country",
"income")
str(data)
summary(data)
data[data == " ?"] = NA
data <- data[complete.cases(data), ]
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model)
evaluation(svm.model, testset, "class")
svm.model2<-svm(income~ education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model3<-svm(income~ age + hours_per_week + education_num + capital_gain + sex + race + education + occupation
+ capital_loss + workclass,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model4<-svm(income~ education_num + marital_status + relationship + capital_gain +
capital_loss,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model5<-svm(income~ .,kernel="polynomial", data=trainset,cost=1,gamma=0.25)
summary(svm.model2)
evaluation(svm.model2, testset, "class")
summary(svm.model3)
evaluation(svm.model3, testset, "class")
summary(svm.model4)
evaluation(svm.model4, testset, "class")
summary(svm.model5)
evaluation(svm.model5, testset, "class")
library(e1071)
library(MLmetrics)
data <-read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
, sep= ",", header=F)
names(data) <- c("age",
"workclass",
"fnlwgt",
"education",
"education_num",
"marital_status",
"occupation",
"relationship",
"race",
"sex",
"capital_gain",
"capital_loss",
"hours_per_week",
"native_country",
"income")
data[data == " ?"] = NA
data <- data[complete.cases(data), ]
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model2<-svm(income~ education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model3<-svm(income~ age + hours_per_week + education_num + capital_gain + sex + race + education + occupation
+ capital_loss + workclass,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model4<-svm(income~ education_num + marital_status + relationship + capital_gain +
capital_loss,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model5<-svm(income~ .,kernel="polynomial", data=trainset,cost=1,gamma=0.25)
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = Accuracy(prediction,testset$income)
precision = Precision(prediction,testset$income)
recall = Recall(prediction,testset$income)
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
summary(svm.model)
evaluation(svm.model, testset, "class")
summary(svm.model2)
evaluation(svm.model2, testset, "class")
summary(svm.model3)
evaluation(svm.model3, testset, "class")
summary(svm.model4)
evaluation(svm.model4, testset, "class")
summary(svm.model5)
evaluation(svm.model5, testset, "class")
library(plyr)
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
data$race = revalue(data$race, c(" Amer-Indian-Eskimo"=" Other",
" Asian-Pac-Islander"=" Other",
" Black"=" Other"))
data$age[data$age <= 30] <- "<=30"
data$age[data$age > 30] <- ">30"
data$age =as.factor(data$age)
data$hours_per_week[data$hours_per_week <= 40] <- "<=40"
data$hours_per_week[data$hours_per_week > 40] <- ">40"
data$hours_per_week =as.factor(data$hours_per_week)
data$education_num[data$education_num <= 10] <- "<=10"
data$education_num[data$education_num > 10] <- ">10"
data$education_num =as.factor(data$education_num)
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model2<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model3<-svm(income~ marital_status + education_num + age + hours_per_week + sex + capital_gain
+ occupation + race ++ capital_loss + education,kernel="radial", data=trainset,cost=1,gamma=0.25)
svm.model4<-svm(income~ age + education_num + marital_status + relationship + capital_gain +
hours_per_week,kernel="radial", data=trainset,cost=1,gamma=0.25)
evaluation <- function(model, data, atype) {
cat("\nConfusion matrix:\n")
prediction = predict(model, data, type=atype)
xtab = table(prediction, testset[,ncol(data)])
print(xtab)
cat("\nEvaluation:\n\n")
accuracy = Accuracy(prediction,testset$income)
precision = Precision(prediction,testset$income)
recall = Recall(prediction,testset$income)
f = 2 * (precision * recall) / (precision + recall)
cat(paste("Accuracy:\t", format(accuracy, digits=3), "\n",sep=" "))
cat(paste("Precision:\t", format(precision, digits=3), "\n",sep=" "))
cat(paste("Recall:\t\t", format(recall, digits=3), "\n",sep=" "))
cat(paste("F-measure:\t", format(f, digits=3), "\n",sep=" "))
}
summary(svm.model)
evaluation(svm.model, testset, "class")
summary(svm.model2)
evaluation(svm.model2, testset, "class")
summary(svm.model3)
evaluation(svm.model3, testset, "class")
summary(svm.model4)
evaluation(svm.model4, testset, "class")
?σωμ
?svm
data <-read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
, sep= ",", header=F)
names(data) <- c("age",
"workclass",
"fnlwgt",
"education",
"education_num",
"marital_status",
"occupation",
"relationship",
"race",
"sex",
"capital_gain",
"capital_loss",
"hours_per_week",
"native_country",
"income")
data[data == " ?"] = NA
data <- data[complete.cases(data), ]
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model6)
evaluation(svm.model6, testset, "class")
evaluation(svm.model, testset, "class")
svm.model6<-svm(income~ .,kernel="sigmoid", data=trainset,cost=1,gamma=0.25)
evaluation(svm.model6, testset, "class")
summary(svm.model6)
evaluation(svm.model6, testset, "class")
head(data)
data
data$marital_status = revalue(data$marital_status, c(" Married-civ-spouse"=" Married",
" Married-AF-spouse"=" Married",
" Married-spouse-absent"=" Married",
" Never-married"=" Not-Married",
" Separated"=" Not-Married",
" Widowed"=" Not-Married",
" Divorced"=" Not-Married"))
data$race = revalue(data$race, c(" Amer-Indian-Eskimo"=" Other",
" Asian-Pac-Islander"=" Other",
" Black"=" Other"))
index = 1:nrow(data)
testindex = sample(index, trunc(length(index)/4))
testset = data[testindex,]
trainset = data[-testindex,]
svm.model<-svm(income~ .,kernel="radial", data=trainset,cost=1,gamma=0.25)
summary(svm.model)
evaluation(svm.model, testset, "class")
setwd("C:/regression_models/linear_regression")
data = read.csv('final_values.csv')
head(data)
model_1 = lm(electricity_cooking ~ oven + microwave + occupants + occupant_type,data = data)
print(summary(model_1))
